---
- name: Get rest API endpoint (v < 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/siesta/rest/v1/script"
  when: nexus_version is version_compare('3.8.0', '<')

- name: Get rest API endpoint (v >= 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/rest/v1/script"
  when: nexus_version is version_compare('3.8.0', '>=')

- name: Get path to default settings
  set_fact:
    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/org.sonatype.nexus.cfg"
  when: nexus_version is version_compare('3.1.0', '<')

- name: Get path to default settings
  set_fact:
    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/nexus-default.properties"
  when: nexus_version is version_compare('3.1.0', '>=')

- name: find which schema to use
  lineinfile:
    path: "{{ nexus_default_settings_file }}"
    regexp: '^nexus-args=.*jetty-https.xml.*'
    state: absent
  check_mode: yes
  register: search_https_schema

- name: set nexus_api_scheme to https
  set_fact:
    nexus_api_scheme: https
  when: search_https_schema.changed | bool

- name: set nexus_api_scheme to http
  set_fact:
    nexus_api_scheme: http
  when: not search_https_schema.changed | bool

- name: Access scripts API endpoint with defined admin password
  uri:
    url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}\
      {{ nexus_api_context_path }}{{ nexus_rest_api_endpoint }}"
    method: 'HEAD'
    user: 'admin'
    password: "{{ nexus_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_defined_password
  check_mode: no

- name: Register defined admin password for next operations
  set_fact:
    current_nexus_admin_password: "{{ nexus_admin_password }}"
  when: nexus_api_head_with_defined_password.status == 200
  no_log: true

- name: Force (re-)registration of groovy scripts (purge reference dir)
  file:
    path: "{{ nexus_data_dir }}/groovy-raw-scripts"
    state: absent
  when: nexus_force_groovy_scripts_registration | default(false)

- name: Create directories to hold current groovy scripts for reference
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    mode: 0755
  with_items:
    - "{{ nexus_data_dir }}/groovy-raw-scripts/current"
    - "{{ nexus_data_dir }}/groovy-raw-scripts/new"
  check_mode: no

- name: Archive scripts
  become: no
  archive:
    path: "{{ role_path }}/files/groovy/*"
    dest: "/tmp/nexus-upload-groovy-scripts.tar.gz"
    mode: 0644
  run_once: true
  delegate_to: localhost
  check_mode: no

- name: Upload new scripts
  unarchive:
    src: "/tmp/nexus-upload-groovy-scripts.tar.gz"
    dest: "{{ nexus_data_dir }}/groovy-raw-scripts/new/"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    mode: 0644
  check_mode: no

- block:
    - name: Sync new scripts to old and get differences
      shell: >
        set -o pipefail &&
        rsync -ric {{ nexus_data_dir }}/groovy-raw-scripts/new/ {{ nexus_data_dir }}/groovy-raw-scripts/current/
        | cut -d" " -f 2 | sed "s/\.groovy//g"
      register: nexus_groovy_files_changed
      check_mode: no
      changed_when: false
      # simple check on changed files kept on host
      # skip ansible lint (we don't want to use synchronize module for this)
      args:
        warn: false
        executable: /bin/bash
  rescue:
    - name: Fail with information on rsync error
      fail:
        msg: >-
          A task involving running rsync on the host just failed, most probably because rsync is not installed.
          Please make sure rsync is installed on your host or double check the above error and try again.

- name: Declare new or changed groovy scripts in nexus
  include_tasks: declare_script_each.yml
  with_items: "{{ nexus_groovy_files_changed.stdout_lines }}"

- name: define cac_changes
  set_fact:
    cac_changes: []
  check_mode: no

- name: CasC users
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_users
    args: "{{ { 'dry_run': ansible_check_mode } | combine ( { 'details': nexus_local_users } ) }}"
  when: nexus_local_users | length > 0

- name: CasC roles
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_roles
    args: "{{ { 'dry_run': ansible_check_mode } | combine ( { 'details': nexus_roles } ) }}"
  when: nexus_roles | length > 0

- name: CasC tasks
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_tasks
    args: "{{ { 'dry_run': ansible_check_mode } | combine ( { 'details': nexus_scheduled_tasks } ) }}"
  when: nexus_scheduled_tasks | length > 0

- name: CasC email
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_email
    args:
      email_server_enabled: "{{ nexus_email_server_enabled }}"
      email_server_host: "{{ nexus_email_server_host }}"
      email_server_port: "{{ nexus_email_server_port }}"
      email_server_username: "{{ nexus_email_server_username }}"
      email_server_password: "{{ nexus_email_server_password }}"
      email_from_address: "{{ nexus_email_from_address }}"
      email_subject_prefix: "{{ nexus_email_subject_prefix }}"
      email_tls_enabled: "{{ nexus_email_tls_enabled }}"
      email_tls_required: "{{ nexus_email_tls_required }}"
      email_ssl_on_connect_enabled: "{{ nexus_email_ssl_on_connect_enabled }}"
      email_ssl_check_server_identity_enabled: "{{ nexus_email_ssl_check_server_identity_enabled }}"
      email_trust_store_enabled: "{{ nexus_email_trust_store_enabled }}"

- name: CasC realm
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_realms
    args:
      nuget_api_key_realm: "{{ nexus_nuget_api_key_realm }}"
      npm_bearer_token_realm: "{{ nexus_npm_bearer_token_realm }}"
      rut_auth_realm: "{{ nexus_rut_auth_realm }}"
      ldap_realm: "{{ nexus_ldap_realm }}"
      docker_bearer_token_realm: "{{ nexus_docker_bearer_token_realm }}"
      crowd_realm: "{{ nexus_crowd_realm }}"
      default_role_realm: "{{ nexus_default_role_realm }}"
      local_authenticating_realm: "{{ nexus_local_authenticating_realm }}"
      local_authorizing_realm: "{{ nexus_local_authorizing_realm }}"
      saml_realm: "{{ nexus_saml_realm }}"
      user_token_realm: "{{ nexus_user_token_realm }}"

- name: CasC anonymous access
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_anonymous_access
    args:
      anonymous_access: "{{ nexus_anonymous_access }}"

- name: apply defaults to privileges
  # @todo: fix with easier syntax once the flip filter is released
  # See more comments on this issue in process_repos_list.yml
  set_fact:
    nexus_privileges: >-
      {%- set result=[] -%}
      {%- for privilege in nexus_privileges -%}
        {{ result.append(_nexus_privilege_defaults | combine(privilege)) }}
      {%- endfor -%}
      {{ result }}

- name: CasC privilege
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_privileges_from_list
    args: "{{ { 'dry_run': ansible_check_mode } | combine ( { 'details': nexus_privileges } ) }}"
  when: nexus_privileges | length > 0

- name: CasC http
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_http_proxy
    args:
      dry_run: "{{ ansible_check_mode }}"
      with_http_proxy: "{{ nexus_with_http_proxy }}"
      http_proxy_host: "{{ nexus_http_proxy_host }}"
      http_proxy_port: "{{ nexus_http_proxy_port }}"
      http_proxy_username: "{{ nexus_http_proxy_username }}"
      http_proxy_password: "{{ nexus_http_proxy_password }}"
      with_https_proxy: "{{ nexus_with_https_proxy }}"
      https_proxy_host: "{{ nexus_https_proxy_host }}"
      https_proxy_port: "{{ nexus_https_proxy_port }}"
      https_proxy_username: "{{ nexus_https_proxy_username }}"
      https_proxy_password: "{{ nexus_https_proxy_password }}"
      proxy_exclude_hosts: "{{ nexus_proxy_exclude_hosts }}"

- name: get max memory definition
  shell: grep "^-Xmx" "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions" | cut -c5-
  register: max_memory
  check_mode: no
  changed_when: False
  tags:
    # shut-off ansible-lint error on this one: this is the desired way of doing it
    - skip_ansible_lint

- name: get min memory definition
  shell: grep "^-Xms" "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions" | cut -c5-
  register: min_memory
  check_mode: no
  changed_when: False
  tags:
    # shut-off ansible-lint error on this one: this is the desired way of doing it
    - skip_ansible_lint

- name: get max_direct memory definition
  shell: grep "^-XX:MaxDirectMemorySize=" "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions" | cut -d= -f2
  register: max_direct_memory
  check_mode: no
  changed_when: False
  tags:
    # shut-off ansible-lint error on this one: this is the desired way of doing it
    - skip_ansible_lint

- name: get jetty key store password
  shell: grep '<Set name="KeyStorePassword">' "{{ nexus_installation_dir }}/nexus-latest/etc/jetty/jetty-https.xml" | tr "><" "\n" | tail -n 3 | head -n 1
  register: jetty_keystore_password
  check_mode: no
  changed_when: False
  tags:
    # shut-off ansible-lint error on this one: this is the desired way of doing it
    - skip_ansible_lin

- name: get jetty key manager password
  shell: grep '<Set name="KeyManagerPassword">' "{{ nexus_installation_dir }}/nexus-latest/etc/jetty/jetty-https.xml" | tr "><" "\n" | tail -n 3 | head -n 1
  register: jetty_keymanager_password
  check_mode: no
  changed_when: False
  tags:
    # shut-off ansible-lint error on this one: this is the desired way of doing it
    - skip_ansible_lin

- name: get jetty trust store password
  shell: grep '<Set name="TrustStorePassword">' "{{ nexus_installation_dir }}/nexus-latest/etc/jetty/jetty-https.xml" | tr "><" "\n" | tail -n 3 | head -n 1
  register: jetty_truststore_password
  check_mode: no
  changed_when: False
  tags:
    # shut-off ansible-lint error on this one: this is the desired way of doing it
    - skip_ansible_lin

- name: get the keystore checksum from local server
  stat:
    path: "{{ keystore_file }}"
    checksum_algorithm: sha1
  delegate_to: localhost
  register: keystore_checksum_local
  when: jetty_https_setup_enable

- name: get the keystore checksum from local server as zero
  set_fact:
    keystore_checksum_local:
      stat:
        checksum: "0"
  when: not jetty_https_setup_enable

- name: get the keystore checksum from remote server
  stat:
    path: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/etc/ssl/keystore.jks"
    checksum_algorithm: sha1
  register: keystore_checksum_remote


- name: get the keystore checksum from remote server as zero
  set_fact:
    keystore_checksum_remote:
      stat:
        checksum: "0"
  when: not keystore_checksum_remote.stat.exists

- name: define generic facts
  set_fact:
    generic_configuration:
      require:
        nexus_download_url: "{{ nexus_download_url }}"
        # nexus_package: "{{ nexus_package }}"
        nexus_download_dir: "{{ nexus_download_dir }}"
        nexus_installation_dir: "{{ nexus_installation_dir }}"
        nexus_version: "{{ nexus_version }}"
        nexus_os_user: "{{ nexus_os_user }}"
        nexus_os_group: "{{ nexus_os_group }}"
        nexus_data_dir: "{{ nexus_data_dir }}"
        nexus_timezone: "{{ nexus_timezone }}"
        nexus_min_heap_size: "{{ nexus_min_heap_size }}"
        nexus_max_heap_size: "{{ nexus_max_heap_size }}"
        nexus_max_direct_memory: "{{ nexus_max_direct_memory }}"
        nexus_tmp_dir: "{{ nexus_tmp_dir }}"
        nexus_os_user_home_dir: "{{ nexus_os_user_home_dir }}"
        # nexus_default_settings_file: "{{ nexus_default_settings_file }}"
        nexus_default_port: "{{ nexus_default_port }}"
        nexus_default_context_path: "{{ nexus_default_context_path }}"
        nexus_application_host: "{{ nexus_application_host }}"
        nexus_os_max_filedescriptors: "{{ nexus_os_max_filedescriptors }}"
        anonymous_access: "{{ nexus_anonymous_access }}"
        jetty_https_enable: "{{ jetty_https_setup_enable }}"
        jetty_keystore_password: "{{ key_store_password }}"
        jetty_keymanager_password: "{{ key_manager_password }}"
        jetty_truststore_password: "{{ trust_store_password }}"
        keystore_checksum: "{{ keystore_checksum_local.stat.checksum }}"
        nexus_default_ssl_port: "{{ nexus_default_ssl_port }}"
      current:
        nexus_min_heap_size: "{{ min_memory.stdout }}"
        nexus_max_heap_size: "{{ max_memory.stdout }}"
        nexus_max_direct_memory: "{{ max_direct_memory.stdout }}"
        jetty_keystore_password: "{{ jetty_keystore_password.stdout }}"
        jetty_keymanager_password: "{{ jetty_keymanager_password.stdout }}"
        jetty_truststore_password: "{{ jetty_truststore_password.stdout }}"
        keystore_checksum: "{{ keystore_checksum_remote.stat.checksum }}"
  check_mode: no

- name: CasC general
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_general_configurations
    args: "{{ generic_configuration }}"

- name: CasC LDAP
  include_tasks: cac_ldap_each.yml
  with_items: "{{ ldap_connections }}"

- name: CasC Ldap Delete
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_ldap_delete
    args: "{{ { 'dry_run': ansible_check_mode } | combine ( { 'details': ldap_connections } ) }}"

- name: Apply defaults to repositories configurations and process a single list
  include_tasks: process_repos_list.yml

- name: CasC repositories
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_repos_from_list
    args: "{{ { 'dry_run': ansible_check_mode } | combine ( { 'details': _nexus_repos_global_list } ) }}"

- name: CasC blobstore
  include_tasks: call_cac_script.yml
  vars:
    script_name: cac_blobstores
    args: "{{ { 'dry_run': ansible_check_mode } | combine ( { 'details': nexus_blobstores } ) }}"
    when: nexus_blobstores | length > 0

- name: create final cac report
  set_fact:
    __final_cac_report:
      git:
      git_branch:
      runtime:
      git_commit_id:
      changes: "{{ cac_changes.action_details }}"
  check_mode: no

- name: save the cac report
  copy:
    content: "{{ __final_cac_report }}"
    dest: "{{ nexus_cac_report_file }}"
    mode: 0644
  check_mode: no
